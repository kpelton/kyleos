#include "paging.h"
#include "vga.h"
// 512 entriesi
#define addr_start 0x10000000
typedef  unsigned long long uint64_t;

uint64_t pml4[4] __attribute__((aligned(0x20))); // must be aligned to (at least)0x20, ...
uint64_t page_dir_ptr_tab[512] __attribute__((aligned(0x20))); // must be aligned to (at least)0x20, ...
uint64_t page_dir[512] __attribute__((aligned(0x1000)));  // must be aligned to page boundary
uint64_t page_tab[512] __attribute__((aligned(0x1000)));
uint64_t page_tab2[512] __attribute__((aligned(0x1000)));
uint64_t page_tab3[512] __attribute__((aligned(0x1000)));
uint64_t page_tab4[512] __attribute__((aligned(0x1000)));
void load_page_directory(unsigned int *page_dir);
void enable_paging(); 


void setup_paging() {
    //set each entry to not present
    char buffer[200];
    pml4[0] = (uint64_t)&page_dir_ptr_tab -addr_start| 3; // set the page directory into the PDPT and mark it present
    page_dir_ptr_tab[0] = (uint64_t)&page_dir -addr_start | 3; // set the page directory into the PDPT and mark it present
    page_dir[128] = (uint64_t)&page_tab -addr_start| 3; //set the page table into the PD and mark it present/writable
    page_dir[129] = (uint64_t)&page_tab2 -addr_start | 3; //set the page table into the PD and mark it present/writable
    page_dir[130] = (uint64_t)&page_tab3 -addr_start| 3; //set the page table into the PD and mark it present/writable
    page_dir[131] = (uint64_t)&page_tab4 -addr_start| 3; //set the page table into the PD and mark it present/writable

    unsigned long int i, address = 0;
    for(i = 0; i < 512; i++) {
        page_tab[i] = address | 3; // map address and mark it present/writable
        address = address + 0x1000;
    }
    for(i = 0; i < 512; i++) {
        page_tab2[i] = address | 3; // map address and mark it present/writable
        address = address + 0x1000;
    }
    for(i = 0; i < 512; i++) {
        page_tab3[i] = address | 3; // map address and mark it present/writable
        address = address + 0x1000;
    }
    for(i = 0; i < 512; i++)
    {
        page_tab4[i] = address | 3; // map address and mark it present/writable
        address = address + 0x1000;
    }

    address =(uint64_t) &pml4 - 0x10000000;
    itoa(address,buffer,16);
    kprintf(buffer);
    kprintf("\n");
    asm volatile("cli; \
            movq %0 ,%%cr3; \ 
            sti; \
            " : : "r"(address));
}

